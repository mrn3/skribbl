{"ast":null,"code":"var _jsxFileName = \"/Users/manewman/Desktop/scribbl_clone/client/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas({\n  isDrawing,\n  sendDrawData,\n  socket\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [drawing, setDrawing] = useState(false);\n  const [color, setColor] = useState('#000000');\n  const [brushSize, setBrushSize] = useState(5);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = 800;\n    canvas.height = 600;\n\n    // Set default styles\n    context.lineCap = 'round';\n    context.lineJoin = 'round';\n    context.strokeStyle = color;\n    context.lineWidth = brushSize;\n\n    // Clear canvas on new turn\n    if (!isDrawing) {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Handle incoming draw data\n    if (socket && !isDrawing) {\n      socket.on('draw-data', data => {\n        const {\n          x0,\n          y0,\n          x1,\n          y1,\n          color,\n          brushSize,\n          type\n        } = data;\n        context.beginPath();\n        if (type === 'start') {\n          context.moveTo(x0, y0);\n          context.lineTo(x1, y1);\n        } else if (type === 'draw') {\n          context.moveTo(x0, y0);\n          context.lineTo(x1, y1);\n        }\n        context.strokeStyle = color;\n        context.lineWidth = brushSize;\n        context.stroke();\n        context.closePath();\n      });\n    }\n    return () => {\n      if (socket) {\n        socket.off('draw-data');\n      }\n    };\n  }, [isDrawing, socket, color, brushSize]);\n  const startDrawing = e => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    context.beginPath();\n    context.moveTo(x, y);\n    setDrawing(true);\n    sendDrawData({\n      x0: x,\n      y0: y,\n      x1: x,\n      y1: y,\n      color,\n      brushSize,\n      type: 'start'\n    });\n  };\n  const draw = e => {\n    if (!isDrawing || !drawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    context.lineTo(x, y);\n    context.stroke();\n    sendDrawData({\n      x0: context.lastX || x,\n      y0: context.lastY || y,\n      x1: x,\n      y1: y,\n      color,\n      brushSize,\n      type: 'draw'\n    });\n    context.lastX = x;\n    context.lastY = y;\n  };\n  const stopDrawing = () => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.closePath();\n    setDrawing(false);\n    context.lastX = undefined;\n    context.lastY = undefined;\n  };\n  const clearCanvas = () => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Send clear command to other clients\n    sendDrawData({\n      type: 'clear'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseOut: stopDrawing,\n      className: isDrawing ? 'drawing' : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drawing-tools\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-picker\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: color,\n          onChange: e => setColor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"brush-size\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"20\",\n          value: brushSize,\n          onChange: e => setBrushSize(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"puM19yREJxAtpB7AVEA8jjI5YB8=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Canvas","isDrawing","sendDrawData","socket","_s","canvasRef","drawing","setDrawing","color","setColor","brushSize","setBrushSize","canvas","current","context","getContext","width","height","lineCap","lineJoin","strokeStyle","lineWidth","clearRect","on","data","x0","y0","x1","y1","type","beginPath","moveTo","lineTo","stroke","closePath","off","startDrawing","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","draw","lastX","lastY","stopDrawing","undefined","clearCanvas","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseOut","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","min","max","parseInt","onClick","_c","$RefreshReg$"],"sources":["/Users/manewman/Desktop/scribbl_clone/client/src/components/Canvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './Canvas.css';\n\nfunction Canvas({ isDrawing, sendDrawData, socket }) {\n  const canvasRef = useRef(null);\n  const [drawing, setDrawing] = useState(false);\n  const [color, setColor] = useState('#000000');\n  const [brushSize, setBrushSize] = useState(5);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    // Set canvas size\n    canvas.width = 800;\n    canvas.height = 600;\n    \n    // Set default styles\n    context.lineCap = 'round';\n    context.lineJoin = 'round';\n    context.strokeStyle = color;\n    context.lineWidth = brushSize;\n    \n    // Clear canvas on new turn\n    if (!isDrawing) {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    \n    // Handle incoming draw data\n    if (socket && !isDrawing) {\n      socket.on('draw-data', (data) => {\n        const { x0, y0, x1, y1, color, brushSize, type } = data;\n        \n        context.beginPath();\n        \n        if (type === 'start') {\n          context.moveTo(x0, y0);\n          context.lineTo(x1, y1);\n        } else if (type === 'draw') {\n          context.moveTo(x0, y0);\n          context.lineTo(x1, y1);\n        }\n        \n        context.strokeStyle = color;\n        context.lineWidth = brushSize;\n        context.stroke();\n        context.closePath();\n      });\n    }\n    \n    return () => {\n      if (socket) {\n        socket.off('draw-data');\n      }\n    };\n  }, [isDrawing, socket, color, brushSize]);\n  \n  const startDrawing = (e) => {\n    if (!isDrawing) return;\n    \n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    context.beginPath();\n    context.moveTo(x, y);\n    setDrawing(true);\n    \n    sendDrawData({\n      x0: x,\n      y0: y,\n      x1: x,\n      y1: y,\n      color,\n      brushSize,\n      type: 'start'\n    });\n  };\n  \n  const draw = (e) => {\n    if (!isDrawing || !drawing) return;\n    \n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    context.lineTo(x, y);\n    context.stroke();\n    \n    sendDrawData({\n      x0: context.lastX || x,\n      y0: context.lastY || y,\n      x1: x,\n      y1: y,\n      color,\n      brushSize,\n      type: 'draw'\n    });\n    \n    context.lastX = x;\n    context.lastY = y;\n  };\n  \n  const stopDrawing = () => {\n    if (!isDrawing) return;\n    \n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    context.closePath();\n    setDrawing(false);\n    context.lastX = undefined;\n    context.lastY = undefined;\n  };\n  \n  const clearCanvas = () => {\n    if (!isDrawing) return;\n    \n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    context.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Send clear command to other clients\n    sendDrawData({ type: 'clear' });\n  };\n\n  return (\n    <div className=\"canvas-wrapper\">\n      <canvas\n        ref={canvasRef}\n        onMouseDown={startDrawing}\n        onMouseMove={draw}\n        onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n        className={isDrawing ? 'drawing' : ''}\n      />\n      \n      {isDrawing && (\n        <div className=\"drawing-tools\">\n          <div className=\"color-picker\">\n            <input\n              type=\"color\"\n              value={color}\n              onChange={(e) => setColor(e.target.value)}\n            />\n          </div>\n          \n          <div className=\"brush-size\">\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"20\"\n              value={brushSize}\n              onChange={(e) => setBrushSize(parseInt(e.target.value))}\n            />\n          </div>\n          \n          <button onClick={clearCanvas}>Clear</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Canvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}